// Generated by CoffeeScript 1.10.0
(function() {
  var BOOTSTRAP_CDN, BOOTSTRAP_THEME, BOOTSTRAP_VERSION, Bootsdown, JQUERY_CDN, JQUERY_VERSION, MARKDOWN, MARKDOWN_CDN;

  BOOTSTRAP_THEME = ['basic', 'bootswatch:cerulean', 'bootswatch:cosmo', 'bootswatch:cyborg', 'bootswatch:darkly', 'bootswatch:flatly', 'bootswatch:journal', 'bootswatch:lumen', 'bootswatch:paper', 'bootswatch:readable', 'bootswatch:standstone', 'bootswatch:simplex', 'bootswatch:slate', 'bootswatch:spacelab', 'bootswatch:superhero', 'bootswatch:united', 'bootswatch:yeti'];

  BOOTSTRAP_VERSION = {
    basic: '3.3.6',
    bootswatch: '3.3.6'
  };

  BOOTSTRAP_CDN = {
    cdnjs: {
      prefix: 'https://cdnjs.cloudflare.com/ajax/libs',
      path: {
        basic: '/twitter-bootstrap/{version}',
        bootswatch: '/bootswatch/{version}/{theme}/bootstrap.min.css'
      }
    },
    staticfile: {
      prefix: 'https://staticfile.qnssl.com',
      path: {
        basic: '/twitter-bootstrap/{version}',
        bootswatch: '/bootswatch/{version}/{theme}/bootstrap.min.css'
      }
    }
  };

  JQUERY_VERSION = '2.1.4';

  JQUERY_CDN = {
    cdnjs: 'https://cdnjs.cloudflare.com/ajax/libs/jquery/{version}/jquery.min.js',
    staticfile: 'https://staticfile.qnssl.com/jquery/{version}/jquery.min.js'
  };

  MARKDOWN_CDN = {
    cdnjs: {
      commonmark: 'https://cdnjs.cloudflare.com/ajax/libs/commonmark/0.24.0/commonmark.min.js',
      showdown: 'https://cdnjs.cloudflare.com/ajax/libs/showdown/1.3.0/showdown.min.js',
      pagedown: 'https://cdnjs.cloudflare.com/ajax/libs/pagedown/1.0/Markdown.Converter.min.js',
      marked: 'https://cdnjs.cloudflare.com/ajax/libs/marked/0.3.5/marked.min.js'
    },
    staticfile: {
      commonmark: 'https://staticfile.qnssl.com/commonmark/0.22.1/commonmark.min.js',
      showdown: 'http://cdn.staticfile.org/showdown/1.3.0/showdown.min.js',
      pagedown: 'http://cdn.staticfile.org/pagedown/1.0/Markdown.Converter.min.js'
    }
  };

  MARKDOWN = {
    commonmark: function(markdown) {
      var reader, writer;
      reader = new commonmark.Parser;
      writer = new commonmark.HtmlRenderer;
      writer.softbreak = '<br />';
      return writer.render(reader.parse(markdown));
    },
    showdown: function(markdown) {
      var converter;
      showdown.setOption('noHeaderId', true);
      showdown.setOption('strikethrough', true);
      showdown.setOption('tables', true);
      converter = new showdown.Converter;
      return converter.makeHtml(markdown);
    },
    pagedown: function(markdown) {
      var converter;
      converter = new Markdown.Converter;
      return converter.makeHtml(markdown);
    },
    marked: function(markdown) {
      marked.setOptions({
        gfm: true,
        tables: true,
        breaks: true,
        sanitize: true,
        smartLists: true,
        smartypants: false
      });
      return marked(markdown);
    }
  };

  Bootsdown = (function() {
    function Bootsdown() {
      var i, len, script, scripts, text;
      this.head = (document.getElementsByTagName('head'))[0];
      this.isHttps = location.protocol === 'https:';
      this.metas = document.getElementsByTagName('meta');
      this.cdn = this.getMeta('bootsdown:cdn', 'cdnjs');
      this.theme = this.getMeta('bootsdown:theme', 'basic');
      this.markdown = this.getMeta('bootsdown:markdown', 'commonmark');
      text = '';
      scripts = document.getElementsByTagName('script');
      for (i = 0, len = scripts.length; i < len; i++) {
        script = scripts[i];
        if ('text/markdown' === script.getAttribute('type')) {
          text = script.innerHTML.replace(/^\s*(.+)\s*$/g, '$1');
          break;
        }
      }
      this.loadMarkdown(function() {
        return console.log(this(text));
      });
      this.loadBootstrap(function() {});
    }

    Bootsdown.prototype.getMeta = function(name, defaults) {
      var i, len, meta, ref;
      if (defaults == null) {
        defaults = null;
      }
      ref = this.metas;
      for (i = 0, len = ref.length; i < len; i++) {
        meta = ref[i];
        if (name === meta.getAttribute('name')) {
          return meta.getAttribute('content');
        }
      }
      return defaults;
    };

    Bootsdown.prototype.loadCss = function(url, cb) {
      var link;
      if (cb == null) {
        cb = null;
      }
      link = document.createElement('link');
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = url;
      link.media = 'all';
      if (cb != null) {
        link.onload = cb;
      }
      return this.head.appendChild(link);
    };

    Bootsdown.prototype.loadJs = function(url, cb) {
      var script;
      if (cb == null) {
        cb = null;
      }
      script = document.createElement('script');
      script.src = url;
      if (cb != null) {
        script.onload = cb;
      }
      return this.head.appendChild(script);
    };

    Bootsdown.prototype.loadMarkdown = function(cb) {
      var parser, url;
      url = MARKDOWN_CDN[this.cdn];
      if (url[this.markdown] == null) {
        throw new Error("Markdown engine " + this.markdown + " is missing");
      }
      parser = MARKDOWN[this.markdown];
      return this.loadJs(url[this.markdown], cb.bind(parser));
    };

    Bootsdown.prototype.loadJQuery = function(cb) {
      var url;
      url = JQUERY_CDN[this.cdn];
      return this.loadJs(url.replace('{version}', JQUERY_VERSION), cb);
    };

    Bootsdown.prototype.loadBootstrap = function(cb) {
      var cssFile, jsFile, name, parts, theme, url;
      url = BOOTSTRAP_CDN[this.cdn];
      parts = this.theme.split(':');
      name = this.theme;
      theme = null;
      jsFile = (url.path.basic.replace('{version}', BOOTSTRAP_VERSION.basic)) + '/js/bootstrap.min.js';
      if (parts > 1) {
        name = parts[0], theme = parts[1];
      }
      cssFile = (url.path[name].replace('{version}', BOOTSTRAP_VERSION[name]).replace('{theme}', theme)) + '/css/bootstrap.min.css';
      this.loadJQuery((function(_this) {
        return function() {
          return _this.loadJs(url.prefix + jsFile, cb);
        };
      })(this));
      return this.loadCss(url.prefix + cssFile);
    };

    return Bootsdown;

  })();

  new Bootsdown;

}).call(this);
